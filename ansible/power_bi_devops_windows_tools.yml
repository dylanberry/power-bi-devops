---
- hosts: azurevms
  gather_facts: no
  tasks:
  - name: Install chocolatey
    win_chocolatey:
      name:
      - chocolatey
      - chocolatey-core.extension
      state: present

  - name: Install Power BI
    win_chocolatey:
      name: PowerBI
      state: present
      ignore_checksums: yes

  - name: Install Azure Pipelines Agent
    win_chocolatey:
      name: azure-pipelines-agent
      state: present
        
  - name: Configure Azure Pipelines Agent
    ansible.windows.win_powershell:
      script: |
        [CmdletBinding()]
        param (
          [string]$AgentInstallPath,
          [string]$AgentName,
          [string]$PoolName,
          [string]$AzdoUri,
          [string]$AzdoPat,
          [string]$RunAsAutoLogon,
          [string]$WindowsLogonAccount,
          [string]$WindowsLogonPassword,
          [string]$WorkDirectory
        )

        function Install-Agent
        {
            param(
                $Config
            )

            try {
                # Set the current directory to the agent dedicated one previously created.
                Push-Location -Path $Config.AgentInstallPath

                $agentConfigArgs = "--unattended", "--url", $Config.AzdoUri, "--auth", "PAT", "--token", $Config.AzdoPat, "--pool", $Config.PoolName, "--agent", $Config.AgentName, "--windowslogonaccount", $Config.WindowsLogonAccount
                if ($Config.RunAsAutoLogon) {
                    # Configure agent to run with autologon enabled
                    #Set-MachineForAutologon -Config $Config
                    $agentConfigArgs += "--overwriteAutoLogon", "--runAsAutoLogon"
                } else {
                    # Configure agent to run as a service
                    $agentConfigArgs += "--runasservice"
                }

                if (-not [string]::IsNullOrWhiteSpace($Config.WindowsLogonPassword)) {
                    $agentConfigArgs += "--windowslogonpassword", $Config.WindowsLogonPassword
                }
                if (-not [string]::IsNullOrWhiteSpace($Config.WorkDirectory)) {
                    $agentConfigArgs += "--work", $Config.WorkDirectory
                }
                $agentConfigPath = Join-Path $Config.AgentInstallPath -ChildPath 'config.cmd'
                #& $agentConfigPath $agentConfigArgs
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "Agent configuration failed with exit code: $LASTEXITCODE"
                }
            } finally {
                Pop-Location
            }
        }

        if (-not $AgentInstallPath) {
          $AgentInstallPath = 'C:\agent'
        }

        # Call the agent with the configure command and all the options (this creates the settings file)
        # without prompting the user or blocking the cmd execution.
        Write-Host 'Installing agent'
        $config = @{
            AgentInstallPath     = $AgentInstallPath;
            AgentName            = $env:ComputerName;
            PoolName             = $PoolName;
            AzdoUri              = $AzdoUri;
            AzdoPat              = $AzdoPat;
            RunAsAutoLogon       = $False;
            WindowsLogonAccount  = $WindowsLogonAccount;
            WindowsLogonPassword = $WindowsLogonPassword;
            WorkDirectory        = $WorkDirectory
        }
        Install-Agent -Config $config
        $agentRunPath = Join-Path $Config.AgentInstallPath -ChildPath 'run.cmd'
        & $agentRunPath $agentConfigArgs
      parameters:
        PoolName: '{{ PoolName }}'
        AzdoUri: '{{ AzdoUri }}'
        AzdoPat: '{{ AzdoPat }}'
        WindowsLogonAccount: '{{ WindowsLogonAccount }}'
        WindowsLogonPassword: '{{ WindowsLogonPassword }}'